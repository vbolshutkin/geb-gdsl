/*
 * Originally implemented by Vladimir Bolshutkin
 * https://github.com/vbolshutkin/geb-gdsl
 *
 * Distributed under Apache 2.0 license, which can be found in LICENSE file
 *
 * Usage: just add this file to Intellij IDEA classpath for your Geb project
 */
import com.intellij.psi.*
import com.intellij.psi.search.GlobalSearchScope
import com.intellij.psi.util.*
import org.jetbrains.plugins.groovy.lang.psi.api.statements.expressions.GrCommandArgumentList
import org.jetbrains.plugins.groovy.lang.psi.impl.statements.arguments.GrArgumentListImpl
import org.jetbrains.plugins.groovy.lang.psi.impl.statements.expressions.GrReferenceExpressionImpl
import org.jetbrains.plugins.groovy.lang.psi.impl.statements.expressions.path.GrMethodCallExpressionImpl
import org.jetbrains.plugins.groovy.lang.psi.util.GroovyPropertyUtils

synchronized def getPreviousElement(place) {
    if (place.prevSibling != null) return getLastLeaf(place.prevSibling)
    if (place.parent == null) return null
    return place.parent
}

synchronized def getLastLeaf(place) {
    def lastChild = place
    while (lastChild.lastChild) lastChild = lastChild.lastChild
    lastChild
}

synchronized PsiClass getPreviousPage(PsiElement place, PsiClass basePage, PsiElement stopElement) {

    def prev = place
    for (int i = 0; i < 200; i++) {
        prev = getPreviousElement(prev)
        if (!prev || prev == stopElement) return basePage

        PsiReference reference = prev.getReference()
        if (reference != null) {
            PsiElement target = reference.resolve()
            if (target instanceof PsiMethod) {

                //println "Found reference to a Method"
                PsiMethod method = target
                if (method.containingClass?.qualName == "geb.Browser"
                        && ["to", "at", "page"].contains(method.name)) {
                    PsiType  pageType = prev.parent.nominalType
                    println "Found Method to/at/page. pageType " + pageType
                    return PsiUtil.resolveClassInType(pageType)
                }


            }
        }
    }
}

synchronized Collection<GrMethodCallExpressionImpl> getGebPageContent(PsiClass pageCls) {
    PsiField content = pageCls.findFieldByName("content", true)
    if (!content) return []

    content.initializer.navigationElement.children
            .findAll { it instanceof GrMethodCallExpressionImpl }
            .collect { (GrMethodCallExpressionImpl)it }
}

synchronized String substituteTypeNames(String fqn, Map<String, String> substituteTypes) {
    substituteTypes.keySet().each {
        if (fqn.contains(it)) fqn = fqn.replaceAll(it, substituteTypes.get(it))
    }
    return fqn
}

synchronized Map getFakeMethodParams(PsiMethod it, PsiClass cls, String[] argumentTypes) {

    Map<String, String> substituteTypes = [:]

    if (it.typeParameterList?.typeParameters) {
        // XXX hardcode for single type-parameter as in "T page(Class<T> cls)"
        substituteTypes.put(it.typeParameterList.typeParameters[0].name, argumentTypes[0])
    }

    println "Adding method : " + substituteTypeNames(it.returnType.canonicalText, substituteTypes) + " " +  it.name + "(" +
            it.parameterList.parameters.collect {
                substituteTypeNames(it.type.canonicalText, substituteTypes) + " " + it.name  }.join(",") + ")"
    return [
            name: it.name,
            type: substituteTypeNames(it.returnType.canonicalText, substituteTypes),
            params: it.parameterList.parameters.collectEntries {[it.name, substituteTypeNames(it.type.canonicalText, substituteTypes)]},
            containingClass: cls.qualifiedName,
            bindsTo: it,
            doc: "DocTest", docUrl: "http://google.com", isStatic: false
        ]
}

boolean isSubPsiClass(PsiClass candidate, String superclass) {
    // TODO check whole hierarchy
    candidate?.superClass?.qualifiedName == superclass
}

def <T> T safe(Closure<T> closure) {
    try {
        return closure.call()
    } catch(Exception e) {
        println e.getMessage()
        return null
    }
}

contributor(context(filetypes: ["groovy"])) {

    // XXX without this line the whole contributor stops working
    String type = psiType

    PsiClass basePage = null

    if (isSubPsiClass(psiClass,"geb.Page")) {

        basePage = psiClass

        // TODO check if we are in Page content definition block
        getGebPageContent(psiClass).each {

            String contentName = it.invokedExpression?.text

            method name: contentName,
                    type: Object.name,
                    params: [
                            options: [
                                    parameter(name:'required', type:Boolean.name, doc:'http://www.gebish.org/manual/current/#code-required-code'),
                                    parameter(name:'min', type:Integer.name, doc:'http://www.gebish.org/manual/current/#content-dsl-min'),
                                    parameter(name:'max', type:Integer.name, doc:'http://www.gebish.org/manual/current/#content-dsl-min'),
                                    parameter(name:'times', type:Integer.name, doc:'http://www.gebish.org/manual/current/#content-dsl-min'),
                                    parameter(name:'cache', type:Boolean.name, doc:'http://www.gebish.org/manual/current/#content-dsl-min'),
                                    parameter(name:'to', type:"java.lang.Class", doc:'http://www.gebish.org/manual/current/#content-dsl-min'),
                                    parameter(name:'wait', type:Boolean.name, doc:'http://www.gebish.org/manual/current/#content-dsl-min'),
                                    parameter(name:'toWait', type:Boolean.name, doc:'http://www.gebish.org/manual/current/#content-dsl-min'),
                                    parameter(name:'page', type:"java.lang.Class", doc:'http://www.gebish.org/manual/current/#content-dsl-min'),


                            ],
                            closure: Closure.name
                    ]

            // options are optional
            method name: contentName,
                    type: Object.name,
                    params: [
                            closure: Closure.name
                    ]
        }

    }






    def project = place.manager.project
    def jpf = JavaPsiFacade.getInstance(project)
    def browserClass =  jpf.findClass("geb.Browser", GlobalSearchScope.allScope(project))

    boolean contribute = false

    def withFrameCall = enclosingCall("withFrame")


    if (place.text.contains("page")) {
        println "==================\n${place.text}\n${psiClass.name}\n=================="
    }

    if (withFrameCall) {
        println "Found withFrame block for " + place.text

        contribute = true

        // resolve Page given in content template options and set it to basePage
        def argList = PsiTreeUtil.getChildOfType(withFrameCall, GrArgumentListImpl)
//        println "arg0: " + argList.allArguments[0].class +
//                " " + argList.allArguments[0].reference
        if (argList.allArguments[0].reference) {
            GrMethodCallExpressionImpl contentItem =
                    getGebPageContent(psiClass).find { it.invokedExpression.text == argList.allArguments[0].reference.canonicalText}
            //println "found content item ${argList.allArguments[0].reference.canonicalText} -> ${contentItem} in PsiClass ${psiClass.name}"
            if (contentItem) {
                def contentArgList = PsiTreeUtil.getChildOfType(contentItem, GrArgumentListImpl)
                //println "content args text:" + contentArgList.text
                def pageExpr = contentArgList.namedArguments.find { it.labelName == "page" }.expression
                if (pageExpr.reference) {
                    def pageCls = pageExpr.reference.resolve()
                    if (pageCls instanceof PsiClass && isSubPsiClass(psiClass,"geb.Page")) {
                        println "Geb page found for withFrame call: ${pageCls.qualifiedName}"
                        basePage = pageCls
                    }
                }

            }
        }



        // TODO better check we are in concrete closure of withFrame, not an arbitrary one
        if (psiClass.qualifiedName == Closure.name) {

            println "Now we are in Closure at withFrame call"

            // add methods from geb.Browser class
            if (place instanceof GrReferenceExpressionImpl) {
                println place.referenceName
                // XXX hardcode: look for to/at/page methods that do have command arguments
                def arguments =  PsiTreeUtil.getNextSiblingOfType(place, GrCommandArgumentList)
                def resolvedType = arguments?.firstChild?.reference?.resolve()
                if (resolvedType instanceof PsiClass) {
                    String typeName = resolvedType.qualifiedName
                    println typeName + " " + place.referenceName
                    def methods = browserClass.findMethodsByName(place.referenceName, false)

                    methods.each {
                        String[] args = [typeName]
                        method getFakeMethodParams(it, browserClass, args)
                    }
                }
            }

        }
    }

    // XXX passing superclass as ctype to context did not work
    if (isSubPsiClass(psiClass,"geb.junit4.GebReportingTest") || isSubPsiClass(psiClass,"geb.spock.GebSpec")) {
        //println "Found test"
        contribute = true
    }
    //contribute = false
    if (!contribute) {
        return
    }

    def stopElement = withFrameCall
    if (!stopElement) method = safe { enclosingMethod() }


    // contribute Page members after switching (using to/at/page)
    PsiClass pageCls = getPreviousPage(place, basePage, stopElement)
    //if (contribute) return
    if (pageCls) {
        println("Found page class: " + pageCls.qualName)

        // existing methods usually have some more verbose toString
        PsiMethod[] methods = pageCls.getMethods().findAll { it.toString() == "Method"}
        methods.each {
            method getFakeMethodParams(it, pageCls, null)
        }

        getGebPageContent(pageCls).each {

            if (!it.closureArguments) return

            String contentName = it.invokedExpression?.text
            String contentType = it.closureArguments[0]?.returnType?.canonicalText

            if (!contentName || !contentType) return

            println "Adding read-only property: " +  contentType + " " + contentName
            method name: GroovyPropertyUtils.getGetterNameNonBoolean(contentName),
                    type: contentType,
                    containingClass: pageCls.qualName,
                    bindsTo: it,
                    doc: "DocTest", docUrl: "http://google.com", isStatic: false
        }
    }
}