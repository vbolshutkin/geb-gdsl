import com.intellij.lang.jvm.JvmParameter
import com.intellij.psi.*
import com.intellij.psi.util.*
import org.jetbrains.plugins.groovy.lang.psi.impl.statements.expressions.path.GrMethodCallExpressionImpl
import org.jetbrains.plugins.groovy.lang.psi.util.GroovyPropertyUtils

synchronized def getPreviousElement(place) {
    if (place.prevSibling != null) return getLastLeaf(place.prevSibling)
    if (place.parent == null) return null
    return place.parent
}

synchronized def getLastLeaf(place) {
    def lastChild = place
    while (lastChild.lastChild) lastChild = lastChild.lastChild
    lastChild
}

synchronized PsiType getPreviousPage(place) {

    def prev = place
    for (int i = 0; i < 200; i++) {
        prev = getPreviousElement(prev)
        if (!prev) return null;

        PsiReference reference = prev.getReference()
        if (reference != null) {
            PsiElement target = reference.resolve()
            if (target instanceof PsiMethod) {

                //println "Found reference to a Method"
                PsiMethod method = target
                if (method.containingClass?.qualName == "geb.Browser"
                        && ["to", "at", "page"].contains(method.name)) {
                    PsiType  pageType = prev.parent.nominalType
                    println "Found Method to/at/page. pageType " + pageType
                    return pageType
                }


            }
        }
    }
}

synchronized Collection<PsiElement> getGebPageContent(PsiClass pageCls) {
    PsiField content = pageCls.findFieldByName("content", true)
    if (!content) return []

    content.initializer.navigationElement.children
}

synchronized String getParameterType(JvmParameter parameter) {
    PsiElement elt = parameter.sourceElement.lastChild.prevSibling.prevSibling
    return elt.type.canonicalText
}

contributor(context()) {

    // XXX without this sb block the whole contributor stops working
    println psiType

    // XXX passing superclass as ctype to context did not work
    if (psiClass?.superClass?.qualName != "geb.junit4.GebReportingTest") {
        return
    }

    println "Found test"

    PsiType pg = getPreviousPage(place)
    //println("Found page type: " + pg)
    if (pg) {
        PsiClass pageCls = PsiUtil.resolveClassInType(pg)
        if (!pageCls) return;
        println("Found page class: " + pageCls.qualName)

        PsiMethod[] methods = pageCls.getMethods().findAll { it.toString() == "Method"}
        PsiField[] fields = pageCls.getFields()

        methods.each {

            println "Adding method : " + it.returnType.canonicalText + " " +  it.name + "(" +
                    it.parameters.collect { getParameterType(it) + " " + it.name  }.join(",") + ")"
            method name: it.name,
                    type: it.returnType.canonicalText,
                    params: it.parameters.collectEntries {[it.name, getParameterType(it)]},
                    containingClass: pageCls.qualName,
                    bindsTo: it,
                    doc: "DocTest", docUrl: "http://google.com", isStatic: false
        }

        getGebPageContent(pageCls).each {

            // XXX (it instanceof PsiMethodCallExpression) did not work
            if (!(it instanceof GrMethodCallExpressionImpl)) {
                // syntax error in Geb page or something changed in PSI model
                return
            }

            String contentName = it.invokedExpression.text
            String contentType = it.closureArguments[0].returnType.className


            println "Adding read-only property: " +  contentType + " " + contentName
            method name: GroovyPropertyUtils.getGetterNameNonBoolean(contentName),
                    type: contentType,
                    containingClass: pageCls.qualName,
                    bindsTo: it,
                    doc: "DocTest", docUrl: "http://google.com", isStatic: false
        }
    }
}
