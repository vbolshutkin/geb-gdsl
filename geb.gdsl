/*
 * Originally implemented by Vladimir Bolshutkin
 * https://github.com/vbolshutkin/geb-gdsl
 *
 * Distributed under Apache 2.0 license, which can be found in LICENSE file
 *
 * Usage: just add this file to Intellij IDEA classpath for your Geb project
 */
import com.intellij.psi.*
import com.intellij.psi.search.GlobalSearchScope
import com.intellij.psi.util.*
import org.jetbrains.plugins.groovy.lang.psi.api.statements.expressions.GrCommandArgumentList
import org.jetbrains.plugins.groovy.lang.psi.impl.statements.expressions.GrReferenceExpressionImpl
import org.jetbrains.plugins.groovy.lang.psi.impl.statements.expressions.path.GrMethodCallExpressionImpl
import org.jetbrains.plugins.groovy.lang.psi.util.GroovyPropertyUtils

synchronized def getPreviousElement(place) {
    if (place.prevSibling != null) return getLastLeaf(place.prevSibling)
    if (place.parent == null) return null
    return place.parent
}

synchronized def getLastLeaf(place) {
    def lastChild = place
    while (lastChild.lastChild) lastChild = lastChild.lastChild
    lastChild
}

synchronized PsiType getPreviousPage(place) {

    def prev = place
    for (int i = 0; i < 200; i++) {
        prev = getPreviousElement(prev)
        if (!prev) return null;

        PsiReference reference = prev.getReference()
        if (reference != null) {
            PsiElement target = reference.resolve()
            if (target instanceof PsiMethod) {

                //println "Found reference to a Method"
                PsiMethod method = target
                if (method.containingClass?.qualName == "geb.Browser"
                        && ["to", "at", "page"].contains(method.name)) {
                    PsiType  pageType = prev.parent.nominalType
                    println "Found Method to/at/page. pageType " + pageType
                    return pageType
                }


            }
        }
    }
}

synchronized Collection<PsiElement> getGebPageContent(PsiClass pageCls) {
    PsiField content = pageCls.findFieldByName("content", true)
    if (!content) return []

    content.initializer.navigationElement.children
}

synchronized String substituteTypeNames(String fqn, Map<String, String> substituteTypes) {
    substituteTypes.keySet().each {
        if (fqn.contains(it)) fqn = fqn.replaceAll(it, substituteTypes.get(it))
    }
    return fqn
}

synchronized Map getFakeMethodParams(PsiMethod it, PsiClass cls, String[] argumentTypes) {

    Map<String, String> substituteTypes = [:]

    if (it.typeParameterList?.typeParameters) {
        // XXX hardcode for single type-parameter as in "T page(Class<T> cls)"
        substituteTypes.put(it.typeParameterList.typeParameters[0].name, argumentTypes[0])
    }

    println "Adding method : " + substituteTypeNames(it.returnType.canonicalText, substituteTypes) + " " +  it.name + "(" +
            it.parameterList.parameters.collect {
                substituteTypeNames(it.type.canonicalText, substituteTypes) + " " + it.name  }.join(",") + ")"
    return [
            name: it.name,
            type: substituteTypeNames(it.returnType.canonicalText, substituteTypes),
            params: it.parameterList.parameters.collectEntries {[it.name, substituteTypeNames(it.type.canonicalText, substituteTypes)]},
            containingClass: cls.qualifiedName,
            bindsTo: it,
            doc: "DocTest", docUrl: "http://google.com", isStatic: false
        ]
}

contributor(context()) {

    // XXX without this line the whole contributor stops working
    String type = psiType

    def project = place.manager.project
    def jpf = JavaPsiFacade.getInstance(project)
    def browserClass =  jpf.findClass("geb.Browser", GlobalSearchScope.allScope(project))

    boolean contribute = false

    if (psiType.toString().contains("Closure")) {

        def methodCall = PsiTreeUtil.getParentOfType(place, GrMethodCallExpressionImpl)
        while (methodCall && methodCall.invokedExpression?.text != "withFrame") {
            methodCall = PsiTreeUtil.getParentOfType(methodCall, GrMethodCallExpressionImpl)
        }

        if (methodCall && "withFrame" == methodCall.invokedExpression.text) {
            println "Found withFrame block for " + place.text
            contribute = true

            if (place instanceof GrReferenceExpressionImpl) {
                println place.referenceName
                // XXX hardcode: look for to/at/page methods that do have command arguments
                def arguments =  PsiTreeUtil.getNextSiblingOfType(place, GrCommandArgumentList)
                def resolvedType = arguments?.firstChild?.reference?.resolve()
                if (resolvedType instanceof PsiClass) {
                    String typeName = resolvedType.qualifiedName
                    println typeName + " " + place.referenceName
                    def methods = browserClass.findMethodsByName(place.referenceName, false)

                    methods.each {
                        String[] args = [typeName]
                        method getFakeMethodParams(it, browserClass, args)
                    }
                }
            }

        }
    }

    // XXX passing superclass as ctype to context did not work
    if (psiClass?.superClass?.qualName == "geb.junit4.GebReportingTest" || psiClass?.superClass?.qualName == "geb.spock.GebSpec") {
        //println "Found test"
        contribute = true
    }
    //contribute = false
    if (!contribute) {
        return
    }

    // contribute Page members after switching (using to/at/page)
    PsiType pg = getPreviousPage(place)
    if (place.text.contains("confirmDelete")) {
        println("confirmDelete: " + "Found page type: " + pg)
    }
    //if (contribute) return
    if (pg) {
        PsiClass pageCls = PsiUtil.resolveClassInType(pg)
        if (!pageCls) return;
        println("Found page class: " + pageCls.qualName)

        PsiMethod[] methods = pageCls.getMethods().findAll { it.toString() == "Method"}
        PsiField[] fields = pageCls.getFields()

        methods.each {
            method getFakeMethodParams(it, pageCls, null)
        }

        getGebPageContent(pageCls).each {

            // XXX (it instanceof PsiMethodCallExpression) did not work
            if (!(it instanceof GrMethodCallExpressionImpl)) {
                // syntax error in Geb page or something changed in PSI model
                return
            }

            String contentName = it.invokedExpression.text
            String contentType = it.closureArguments[0].returnType.className


            println "Adding read-only property: " +  contentType + " " + contentName
            method name: GroovyPropertyUtils.getGetterNameNonBoolean(contentName),
                    type: contentType,
                    containingClass: pageCls.qualName,
                    bindsTo: it,
                    doc: "DocTest", docUrl: "http://google.com", isStatic: false
        }
    }
}